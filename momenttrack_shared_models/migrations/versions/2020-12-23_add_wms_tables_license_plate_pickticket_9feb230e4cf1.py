"""add wms tables - license_plate & pickticket

Revision ID: 9feb230e4cf1
Revises: d49ba843b5d9
Create Date: 2020-12-23 20:50:11.798462

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "9feb230e4cf1"
down_revision = "d49ba843b5d9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "license_plate",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("lp_id", sa.String(length=63), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=True),
        sa.Column("starting_qty", sa.Float(), nullable=True),
        sa.Column("remaining_qty", sa.Float(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(length=31), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("lp_id"),
    )
    op.create_table(
        "pickticket",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pick_type", sa.String(length=31), nullable=False),
        sa.Column(
            "location_id", sa.Integer(), nullable=True, comment="Current facility id"
        ),
        sa.Column(
            "dest_location_id",
            sa.Integer(),
            nullable=True,
            comment="Destination facility id",
        ),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(length=31), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dest_location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "license_plate_move",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("trx_id", sa.String(length=63), nullable=False),
        sa.Column("license_plate_id", sa.Integer(), nullable=True),
        sa.Column("move_qty", sa.Float(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("dest_location_id", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(length=31), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dest_location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["license_plate_id"],
            ["license_plate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("trx_id"),
    )
    op.create_table(
        "pickticket_line_items",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pick_id", sa.Integer(), nullable=True),
        sa.Column("product_id", sa.Integer(), nullable=True),
        sa.Column("license_plate_id", sa.Integer(), nullable=True),
        sa.Column("license_plate_move_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("requested_qty", sa.Float(), nullable=True),
        sa.Column("fulfilled_qty", sa.Float(), nullable=True),
        sa.Column("status", sa.String(length=31), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["license_plate_id"],
            ["license_plate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["license_plate_move_id"],
            ["license_plate_move.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pick_id"],
            ["pickticket.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("pickticket_line_items")
    op.drop_table("license_plate_move")
    op.drop_table("pickticket")
    op.drop_table("license_plate")
    # ### end Alembic commands ###
