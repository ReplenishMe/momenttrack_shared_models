"""add pick & activity tables

Revision ID: 0137efae8ef3
Revises: 28226721d4aa
Create Date: 2021-03-08 17:17:05.337504

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0137efae8ef3"
down_revision = "28226721d4aa"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "pick",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pick_type", sa.String(length=31), nullable=False),
        sa.Column(
            "location_id", sa.Integer(), nullable=True, comment="Current facility id"
        ),
        sa.Column(
            "dest_location_id",
            sa.Integer(),
            nullable=True,
            comment="Destination facility id",
        ),
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("CREATED", "DELETED", name="pickstatusenum", native_enum=False),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dest_location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "activity_change_track",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("activity_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column(
            "field_name", sa.String(length=31), nullable=True, comment="Column name"
        ),
        sa.Column(
            "field_type",
            sa.Enum(
                "INTEGER",
                "FLOAT",
                "STRING",
                "DATETIME",
                name="activitychangetrackfieldtypeenum",
                native_enum=False,
            ),
            nullable=False,
            comment="column data type",
        ),
        sa.Column("old_value_integer", sa.Integer(), nullable=True),
        sa.Column("old_value_float", sa.Float(), nullable=True),
        sa.Column("old_value_string", sa.String(length=255), nullable=True),
        sa.Column("old_value_datetime", sa.DateTime(), nullable=True),
        sa.Column("new_value_integer", sa.Integer(), nullable=True),
        sa.Column("new_value_float", sa.Float(), nullable=True),
        sa.Column("new_value_string", sa.String(length=255), nullable=True),
        sa.Column("new_value_datetime", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["activity_id"],
            ["activity.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pick_lineitem",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pick_id", sa.Integer(), nullable=True),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("license_plate_id", sa.Integer(), nullable=True),
        sa.Column("license_plate_move_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column("requested_qty", sa.Float(), nullable=True),
        sa.Column("fulfilled_qty", sa.Float(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "CREATED", "DELETED", name="picklineitemstatusenum", native_enum=False
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["license_plate_id"],
            ["license_plate.id"],
        ),
        sa.ForeignKeyConstraint(
            ["license_plate_move_id"],
            ["license_plate_move.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pick_id"],
            ["pick.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("pickticket_lineitem")
    op.drop_table("pickticket")
    op.add_column(
        "activity",
        sa.Column(
            "activity_type",
            sa.Enum(
                "CHANGE_TRACK", "COMMENT", name="activitytypeenum", native_enum=False
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "activity",
        sa.Column(
            "message", sa.String(length=127), nullable=True, comment="user notes"
        ),
    )
    op.add_column(
        "activity",
        sa.Column(
            "model_id", sa.Integer(), nullable=True, comment="model's primary key"
        ),
    )
    op.add_column(
        "activity",
        sa.Column(
            "model_name",
            sa.String(length=31),
            nullable=True,
            comment="Model/table name",
        ),
    )
    op.drop_constraint("activity_activity_type_id_fkey", "activity", type_="foreignkey")
    op.drop_column("activity", "activity_type_id")
    op.add_column(
        "license_plate_move", sa.Column("activity_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "license_plate_move", sa.Column("src_location_id", sa.Integer(), nullable=True)
    )
    op.drop_constraint(
        "license_plate_move_location_id_fkey", "license_plate_move", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "license_plate_move", "activity", ["activity_id"], ["id"]
    )
    op.create_foreign_key(
        None, "license_plate_move", "location", ["src_location_id"], ["id"]
    )
    op.drop_column("license_plate_move", "location_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "license_plate_move",
        sa.Column("location_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "license_plate_move", type_="foreignkey")
    op.drop_constraint(None, "license_plate_move", type_="foreignkey")
    op.create_foreign_key(
        "license_plate_move_location_id_fkey",
        "license_plate_move",
        "location",
        ["location_id"],
        ["id"],
    )
    op.drop_column("license_plate_move", "src_location_id")
    op.drop_column("license_plate_move", "activity_id")
    op.add_column(
        "activity",
        sa.Column("activity_type_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "activity_activity_type_id_fkey",
        "activity",
        "activity_type",
        ["activity_type_id"],
        ["id"],
    )
    op.drop_column("activity", "model_name")
    op.drop_column("activity", "model_id")
    op.drop_column("activity", "message")
    op.drop_column("activity", "activity_type")
    op.create_table(
        "pickticket_lineitem",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("pickticket_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("license_plate_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "license_plate_move_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "requested_qty",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "fulfilled_qty",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("status", sa.VARCHAR(length=31), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["license_plate_id"],
            ["license_plate.id"],
            name="pickticket_lineitem_license_plate_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["license_plate_move_id"],
            ["license_plate_move.id"],
            name="pickticket_lineitem_license_plate_move_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
            name="pickticket_lineitem_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["pickticket_id"],
            ["pickticket.id"],
            name="pickticket_lineitem_pickticket_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"], ["product.id"], name="pickticket_lineitem_product_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="pickticket_lineitem_pkey"),
    )
    op.create_table(
        "pickticket",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "pick_type", sa.VARCHAR(length=31), autoincrement=False, nullable=False
        ),
        sa.Column(
            "location_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Current facility id",
        ),
        sa.Column(
            "dest_location_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Destination facility id",
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=31), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["dest_location_id"],
            ["location.id"],
            name="pickticket_dest_location_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["location_id"], ["location.id"], name="pickticket_location_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
            name="pickticket_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="pickticket_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="pickticket_pkey"),
    )
    op.drop_table("pick_lineitem")
    op.drop_table("activity_change_track")
    op.drop_table("pick")
    # ### end Alembic commands ###
